{"version":3,"sources":["components/Info.tsx","components/Form.tsx","components/Weather.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Info","className","Form","props","onSubmit","gettingWeather","type","name","placeholder","Weather","state","city","country","temp","pressure","error","App","useState","undefined","sunset","setState","setError","event","a","preventDefault","target","elements","value","fetch","api_url","json","data","trim","main","cityName","sys","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAUgBA,EARH,WACT,OACI,sBAAKC,UAAW,OAAhB,UACI,yCACA,uECMIC,EARH,SAACC,GACV,OACI,uBAAMF,UAAY,OAAQG,SAAUD,EAAME,eAA1C,UACI,uBAAOC,KAAO,OAAOC,KAAO,OAAOC,YAAa,SAChD,qDCWIC,EAZA,SAACN,GACb,OACI,gCACMA,EAAMO,MAAMC,MAAQ,sBAAKV,UAAW,YAAhB,UAClB,sDAAkBE,EAAMO,MAAMC,KAA9B,IAAsC,IAAtC,YAA6CR,EAAMO,MAAME,YACzD,+CAAkBT,EAAMO,MAAMG,KAA9B,IAAwC,aACxC,4CAAeV,EAAMO,MAAMI,eAE9BX,EAAMY,OAAS,qBAAKd,UAAW,QAAhB,SAA0BE,EAAMY,YCkD7CC,MAjDf,WAAgB,IAAD,EAEeC,mBAAoB,CAC1CJ,UAAMK,EACNP,UAAMO,EACNN,aAASM,EACTJ,cAAUI,EACVC,YAAQD,IAPD,mBAEJR,EAFI,KAEGU,EAFH,OASeH,mBAAS,KATxB,mBASJF,EATI,KASGM,EATH,KAWLhB,EAAc,uCAAG,WAAOiB,GAAP,2BAAAC,EAAA,sEAEfD,EAAME,iBACAb,EAAOW,EAAMG,OAAOC,SAASf,KAAKgB,MAHzB,SAIOC,MAAM,qDAAD,OAAsDjB,EAAtD,kBAzBvB,mCAyBuB,kBAJZ,cAITkB,EAJS,gBAKIA,EAAQC,OALZ,OAKTC,EALS,OAOXpB,GAAyB,KAAhBA,EAAKqB,QACRnB,EAAOkB,EAAKE,KAAKpB,KACjBqB,EAAWH,EAAKxB,KAChBK,EAAUmB,EAAKI,IAAIvB,QACnBE,EAAWiB,EAAKE,KAAKnB,SAC3BM,EAAS,2BACFV,GADC,IACMG,KAAMA,EAAMF,KAAMuB,EAAUtB,QAASA,EAASE,SAAUA,KAEtEO,EAAS,KAETA,EAAS,2BAjBE,kDAqBfD,EAAS,IACTC,EAAS,uCAtBM,0DAAH,sDAyBpB,OACI,qBAAKpB,UAAW,YAAhB,SACI,sBAAKA,UAAW,UAAhB,UACA,cAAC,EAAD,IACA,sBAAKA,UAAW,OAAhB,UACI,cAAC,EAAD,CAAMI,eAAgBA,IACtB,cAAC,EAAD,CAASK,MAAOA,EAAOK,MAAOA,aC5C/BqB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d34f5a00.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Info = () => {\r\n    return (\r\n        <div className={\"info\"}>\r\n            <h2>Weather</h2>\r\n            <p>Find out the weather in your city!</p>\r\n        </div>\r\n    )\r\n}\r\nexport default  Info;","import React, {useState} from 'react'\r\ntype FormType = {\r\n    gettingWeather: (event: any) => void\r\n}\r\nconst Form = (props: FormType) => {\r\n    return (\r\n        <form className= {\"form\"} onSubmit={props.gettingWeather}>\r\n            <input type = 'text' name = 'city' placeholder={'City'}/>\r\n            <button>get weather</button>\r\n        </form>\r\n    )\r\n}\r\nexport default  Form;","import React from 'react'\r\nimport {StateType} from \"../App\";\r\n\r\ntype WeatherPropsType = {\r\n    state: StateType\r\n    error: string\r\n}\r\nconst Weather = (props: WeatherPropsType) => {\r\n    return (\r\n        <div>\r\n            { props.state.city && <div className={\"infoWeath\"}>\r\n                <p> Location: {`${props.state.city} ${','} ${props.state.country}`}</p>\r\n                <p> Temperature: {props.state.temp} {`${\", Â°C\"}`}</p>\r\n                <p> Pressure: {props.state.pressure}</p>\r\n            </div>}\r\n            {props.error && <div className={\"error\"}>{props.error}</div>}\r\n        </div>\r\n    )\r\n}\r\nexport default  Weather;","import React, {useState} from 'react';\nimport './App.css';\nimport Info from \"./components/Info\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"b326a97e75be8ded20fc476c2995cbad\"\n\nexport type StateType = {\n    temp: number | undefined\n    city: string | undefined\n    country: string | undefined,\n    pressure: string | undefined,\n    sunset: string | undefined\n}\n\nfunction App() {\n\n    const [state, setState] = useState<StateType>({\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        pressure: undefined,\n        sunset: undefined\n    })\n    const [error, setError] = useState(\" \")\n\n    const gettingWeather = async (event: any) => {\n        try {\n            event.preventDefault()\n            const city = event.target.elements.city.value;\n            const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n            const data = await api_url.json();\n\n            if (city && (city.trim() !== \"\")) {\n                const temp = data.main.temp;\n                const cityName = data.name;\n                const country = data.sys.country;\n                const pressure = data.main.pressure;\n                setState({\n                    ...state, temp: temp, city: cityName, country: country, pressure: pressure,\n                })\n                setError(\"\")\n            } else {\n                setError(\"Error! Enter city name!\")\n            }\n        } catch (e) {\n            // @ts-ignore\n            setState('')\n            setError(\"Error! Enter the correct city name!\")\n        }\n    }\n    return (\n        <div className={\"container\"}>\n            <div className={\"wrapper\"}>\n            <Info/>\n            <div className={\"main\"}>\n                <Form gettingWeather={gettingWeather}/>\n                <Weather state={state} error={error}/>\n            </div>\n        </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}